headers = C:/Users/carlo/IdeaProjects/curl_teste/src/nativeInterop/cinterop/curl/curl.h
libraryPaths = C:/Users/carlo/IdeaProjects/curl_teste/src/nativeInterop/cinterop
staticLibraries = libcurl.a
linkerOpts.mingw = -lws2_32 -lwldap32

---

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct MemoryStruct {
  char *memory;
  size_t size;
} MemoryStruct;

char* allocateString(int i){  // same as: { val x = nativeHeap.allocArray<ByteVar>(i) }
    char* buf = malloc(i);
    return buf;
}

MemoryStruct* returnStruct(){     // same as: { val c = nativeHeap.alloc<MemoryStruct>()
                                   //            c.size = 0.convert()
                                   //            c.memory = nativeHeap.allocArray<ByteVar>(1) }
    MemoryStruct *j = (MemoryStruct *) malloc (sizeof(MemoryStruct));
    j->size = 0;
    j->memory = malloc(1);
    return j;
}

void freeStruct(MemoryStruct *j){
    free(j);
    j = NULL;
    return;
}

size_t copyBuf(MemoryStruct *in, char *out){
   size_t len = in->size;
   int i = 0;
   for (i=0;i<len;i++){
      out[i] = in->memory[i];
   }
   return len;
}

size_t bufsize(MemoryStruct *in){
   return in->size;
}

typedef size_t  (*MyFun)(void *,size_t,size_t,void *);


/// WriteMemoryCallback from https://curl.se/libcurl/c/getinmemory.html

static size_t
WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp)
{
  //printf(".");
  size_t realsize = size * nmemb;
  struct MemoryStruct *mem = (struct MemoryStruct *)userp;
  mem->memory = realloc(mem->memory, mem->size + realsize + 1);
  if(mem->memory == NULL) {
    /* out of memory! */
    printf("not enough memory (realloc returned NULL)\n");
    return 0;
  }
  memcpy(&(mem->memory[mem->size]), contents, realsize);
  mem->size += realsize;
  mem->memory[mem->size] = 0;
  return realsize;
}

MyFun supply_fun() {
  return WriteMemoryCallback;
}